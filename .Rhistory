#paras <- unlist(strsplit(txt, "(?m)^[ ]{2}", perl = TRUE))
# replace page break markers w space
paras <- str_replace(paras, "[ \\n]*\\[{2}Page [A-Z-\\d]+\\]{2}[ \\n]*", " ")
paras <- paras[grep("[a-zA-Z]", paras)] # there must be a letter at least
# normalize quirky punctuation
paras <- str_replace(paras, "``", "\"") # Compact exploded left quote marks
paras <- str_replace(paras, "''", "\"") # Compact exploded right quote marks
paras <- str_replace(paras, "`", "'") # Compact exploded right scare quote
paras <- str_replace(paras, "([a-zA-Z0-9])--([a-zA-Z0-9])", "\\1 -- \\2") # explode hyphens
# In this complex pattern group 1 is the complete match and group 7 is the name
speaker_label <- regex("((^The )|(^Mrs. )|(^Mr. )|(^Ms. ))([A-Z ]{2,}).")
speakers <- str_match(paras, speaker_label)[,7]
quotation <- regex("^[ ]{2}") # indented 2 more spaces in
is_quote <- !is.na(str_match(paras, quotation)[,1]) # TRUE if a part of a quotation
debate <- data.frame(speaker = speakers, text = paras, quote = is_quote)
debate <- fill(debate, speaker) # fill in speakers for all paragraphs
head(debate)
table(grepl("[Pages", debate$text))
table(grepl("\\[Pages", debate$text))
process_debate_text <- function(txt) {
# split into paragraphs
para_start <- regex("^[ ]{2}", multiline = TRUE)
paras <- unlist(str_split(txt, para_start))
# replace page break markers w space
paras <- str_replace(paras, "[ \\n]*\\[{2}Page [A-Z\\d]+\\]{2}[ \\n]*", " ")
paras <- paras[grep("[a-zA-Z]", paras)] # there must be a letter at least
# normalize quirky punctuation
paras <- str_replace(paras, "``", "\"") # Compact exploded left quote marks
paras <- str_replace(paras, "''", "\"") # Compact exploded right quote marks
paras <- str_replace(paras, "`", "'") # Compact exploded right scare quote
paras <- str_replace(paras, "([a-zA-Z0-9])--([a-zA-Z0-9])", "\\1 -- \\2") # explode hyphens
# In this complex pattern group 1 is the complete match and group 7 is the name
speaker_label <- regex("((^The )|(^Mrs. )|(^Mr. )|(^Ms. ))([A-Z ]{2,}).")
speakers <- str_match(paras, speaker_label)[,7]
quotation <- regex("^[ ]{2}") # indented 2 more spaces in
is_quote <- !is.na(str_match(paras, quotation)[,1]) # TRUE if a part of a quotation
debate <- data.frame(speaker = speakers, text = paras, quote = is_quote)
debate <- fill(debate, speaker) # tidyr::fill in speakers for all paragraphs
debate[!is.na(debate$speaker), ] # the entries for which we have a speaker
}
pt1 <- "https://www.congress.gov/crec/2003/10/21/modified/CREC-2003-10-21-pt1-PgS12914-2.htm"
txt1 <- read_html(pt1) %>%
html_node("pre") %>%
html_text
deb1 <- process_debate_text(txt1)
head(deb1)
head(deb1, 30)
deb1
pt2 <- "https://www.congress.gov/crec/2003/10/21/modified/CREC-2003-10-21-pt1-PgS12927-2.htm"
txt2 <- read_html(pt2) %>%
html_node("pre") %>%
html_text
deb2 <- process_debate_text(txt2)
deb2
View(deb2)
View(deb2)
deb2old <- deb2
paras <- str_replace(paras, speaker_label, "")
paras
process_debate_text <- function(txt) {
# split into paragraphs
para_start <- regex("^[ ]{2}", multiline = TRUE)
paras <- unlist(str_split(txt, para_start))
# replace page break markers w space
paras <- str_replace(paras, "[ \\n]*\\[{2}Page [A-Z\\d]+\\]{2}[ \\n]*", " ")
paras <- paras[grep("[a-zA-Z]", paras)] # there must be a letter at least
# normalize quirky punctuation
paras <- str_replace(paras, "``", "\"") # Compact exploded left quote marks
paras <- str_replace(paras, "''", "\"") # Compact exploded right quote marks
paras <- str_replace(paras, "`", "'") # Compact exploded right scare quote
paras <- str_replace(paras, "([a-zA-Z0-9])--([a-zA-Z0-9])", "\\1 -- \\2") # explode hyphens
# In this complex pattern group 1 is the complete match and group 7 is the name
speaker_label <- regex("((^The )|(^Mrs. )|(^Mr. )|(^Ms. ))([A-Z ]{2,}). ")
speakers <- str_match(paras, speaker_label)[,7]
# and remove this metadata from the transcript
paras <- str_replace(paras, speaker_label, "")
quotation <- regex("^[ ]{2}") # indented 2 more spaces in
is_quote <- !is.na(str_match(paras, quotation)[,1]) # TRUE if a part of a quotation
debate <- data.frame(speaker = speakers, text = paras, quote = is_quote)
debate <- fill(debate, speaker) # tidyr::fill in speakers for all paragraphs
debate[!is.na(debate$speaker), ] # the entries for which we have a speaker
}
pt2 <- "https://www.congress.gov/crec/2003/10/21/modified/CREC-2003-10-21-pt1-PgS12927-2.htm"
txt2 <- read_html(pt2) %>%
html_node("pre") %>%
html_text
deb2 <- process_debate_text(txt2)
head(deb2)
head(data.frame(deb2, deb2old$text))
hh <- data.frame(deb2, deb2old$text)
View(hh)
library(dplyr)
deb <- bind_rows(deb1, deb2)
process_debate_text <- function(txt) {
# split into paragraphs
para_start <- regex("^[ ]{2}", multiline = TRUE)
paras <- unlist(str_split(txt, para_start))
# replace page break markers w space
paras <- str_replace(paras, "[ \\n]*\\[{2}Page [A-Z\\d]+\\]{2}[ \\n]*", " ")
paras <- paras[grep("[a-zA-Z]", paras)] # there must be a letter at least
# normalize quirky punctuation
paras <- str_replace(paras, "``", "\"") # Compact exploded left quote marks
paras <- str_replace(paras, "''", "\"") # Compact exploded right quote marks
paras <- str_replace(paras, "`", "'") # Compact exploded right scare quote
paras <- str_replace(paras, "([a-zA-Z0-9])--([a-zA-Z0-9])", "\\1 -- \\2") # explode hyphens
# In this complex pattern group 1 is the complete match and group 7 is the name
speaker_label <- regex("((^The )|(^Mrs. )|(^Mr. )|(^Ms. ))([A-Z ]{2,}). ")
speakers <- str_match(paras, speaker_label)[,7]
# and remove this metadata from the transcript
paras <- str_replace(paras, speaker_label, "")
quotation <- regex("^[ ]{2}") # indented 2 more spaces in
is_quote <- !is.na(str_match(paras, quotation)[,1]) # TRUE if a part of a quotation
debate <- data.frame(speaker = speakers, text = paras, quote = is_quote,
stringsAsFactors = FALSE)
debate <- fill(debate, speaker) # tidyr::fill in speakers for all paragraphs
debate[!is.na(debate$speaker), ] # the entries for which we have a speaker
}
pt1 <- "https://www.congress.gov/crec/2003/10/21/modified/CREC-2003-10-21-pt1-PgS12914-2.htm"
txt1 <- read_html(pt1) %>%
html_node("pre") %>%
html_text
deb1 <- process_debate_text(txt1)
pt2 <- "https://www.congress.gov/crec/2003/10/21/modified/CREC-2003-10-21-pt1-PgS12927-2.htm"
txt2 <- read_html(pt2) %>%
html_node("pre") %>%
html_text
deb2 <- process_debate_text(txt2)
deb <- bind_rows(deb1, deb2)
View(deb)
deb_by_speaker <- deb %>%
group_by(speaker) %>%
summarise(paste(text))
deb_by_speaker <- deb %>%
group_by(speaker) %>%
summarise(paste(text, collapse = "\n"))
View(deb_by_speaker)
deb_by_speaker <- deb %>%
group_by(speaker) %>%
summarise(contributions = paste(text, collapse = "\n"))
View(deb_by_speaker)
?starts_with
?filter
deb_by_speaker <- deb %>%
group_by(speaker) %>%
summarise(contributions = paste(text, collapse = "\n")) %>%
filter(!grepl("PRESIDE", speaker))
deb_by_speaker$speaker
deb_by_speaker <- deb %>%
group_by(speaker) %>%
summarise(contributions = paste(text, collapse = "\n")) %>%
filter(!grepl("PRESID", speaker))
deb_by_speaker$speaker
pbo_debate <- deb
pbo_debate_by_speaker <- deb_by_speaker
setwd("../")
devtools::use_data(pbo_debate)
devtools::use_data(pbo_debate_by_speaker)
df_pba_debate <- bind_rows(deb1, deb2)
df_pba_debate_by_speaker <- df_pba_debate %>%
group_by(speaker) %>%
summarise(contributions = paste(text, collapse = "\n")) %>%
filter(!grepl("PRESID", speaker)) # remove the presiding officer
devtools::use_data(df_pba_debate)
devtools::use_data(df_pba_debate_by_speaker)
corp <- corpus(readtext(df_pba_debate_by_speaker))
?corpus
corp <- corpus(df_pba_debate_by_speaker, docid_field = "speaker")
names(df_pba_debate_by_speaker)
corp <- corpus(df_pba_debate_by_speaker, docid_field = "speaker", text_field = "contributions")
summary(corp)
df_pba_debate_by_speaker[df_pba_debate_by_speaker$speaker == "REID",]
df_pba_debate_by_speaker[df_pba_debate_by_speaker$speaker == "REID",'contributions']
as.vector(df_pba_debate_by_speaker[df_pba_debate_by_speaker$speaker == "REID",'contributions'])
cat(df_pba_debate_by_speaker[df_pba_debate_by_speaker$speaker == "REID",'contributions'])
cat(df_pba_debate_by_speaker[df_pba_debate_by_speaker$speaker == "REID",'contributions'][[1]])
corpdfm <- dfm(corp)
wfish <- textmodel_wordfish(corpdfm, dir = c(1, 12))
summary(wfish)
preds  <- predict(wfish, interval = "confidence")
preds
preds %>% arrange(fit)
as.data.frame(preds) %>% arrange(fit)
data.frame(preds) %>% arrange(fit)
data.frame(preds$fit) %>% arrange(fit)
data.frame(preds$fit)
dd <- data.frame(preds$fit)
dd[order(dd$fit),[
dd[order(dd$fit),]
df_pba_debate_by_speaker
df_pba_debate_by_speaker$speaker
party <- c("R", "", "D", "R", "", "", "", "D", "R", "", "D", "", "D", "R", "D", "", "", "", "", "R", "R", "")
data.frame(df_pba_debate_by_speaker$speaker, party)
process_debate_text <- function(txt) {
# split into paragraphs
para_start <- regex("^[ ]{2}", multiline = TRUE)
paras <- unlist(str_split(txt, para_start))
# replace page break markers w space
paras <- str_replace(paras, "[ \\n]*\\[{2}Page [A-Z\\d]+\\]{2}[ \\n]*", " ")
paras <- paras[grep("[a-zA-Z]", paras)] # there must be a letter at least
# normalize quirky punctuation
paras <- str_replace(paras, "``", "\"") # Compact exploded left quote marks
paras <- str_replace(paras, "''", "\"") # Compact exploded right quote marks
paras <- str_replace(paras, "`", "'") # Compact exploded right scare quote
paras <- str_replace(paras, "([a-zA-Z0-9])--([a-zA-Z0-9])", "\\1 -- \\2") # explode hyphens
# In this complex pattern group 1 is the complete match and group 7 is the name
speaker_label <- regex("((^The )|(^Mrs. )|(^Mr. )|(^Ms. ))([eA-Z ]{2,}). ")
speakers <- str_match(paras, speaker_label)[,7]
# and remove this metadata from the transcript
paras <- str_replace(paras, speaker_label, "")
quotation <- regex("^[ ]{2}") # indented 2 more spaces in
is_quote <- !is.na(str_match(paras, quotation)[,1]) # TRUE if a part of a quotation
debate <- data.frame(speaker = speakers, text = paras, quote = is_quote,
stringsAsFactors = FALSE)
debate <- fill(debate, speaker) # tidyr::fill in speakers for all paragraphs
debate[!is.na(debate$speaker), ] # the entries for which we have a speaker
}
pt1 <- "https://www.congress.gov/crec/2003/10/21/modified/CREC-2003-10-21-pt1-PgS12914-2.htm"
txt1 <- read_html(pt1) %>%
html_node("pre") %>%
html_text
deb1 <- process_debate_text(txt1)
pt2 <- "https://www.congress.gov/crec/2003/10/21/modified/CREC-2003-10-21-pt1-PgS12927-2.htm"
txt2 <- read_html(pt2) %>%
html_node("pre") %>%
html_text
deb2 <- process_debate_text(txt2)
df_pba_debate <- bind_rows(deb1, deb2)
df_pba_debate_by_speaker <- df_pba_debate %>%
group_by(speaker) %>%
summarise(contributions = paste(text, collapse = "\n")) %>%
filter(!grepl("PRESID", speaker)) # remove the presiding officer
df_pba_debate_by_speaker
df_pba_debate_by_speaker$speaker
devtools::use_data(df_pba_debate_by_speaker, overwrite = TRUE)
devtools::use_data(df_pba_debate, overwrite = TRUE)
data.frame(df_pba_debate_by_speaker$speaker, party)
party <- c("R", "", "D", "R", "", "", "R", "", "D", "R", "", "D", "", "D", "R", "D", "", "", "", "", "R", "R", "")
data.frame(df_pba_debate_by_speaker$speaker, party)
party <- c("R", "R", "D", "R", "R", "D", "R", "R", "D", "R", "D", "D", "R", "D", "R", "D", "D", "D", "R", "D", "R", "R", "R")
data.frame(df_pba_debate_by_speaker$speaker, party)
df_pba_debate_by_speaker$party <- party
left_join(df_pba_debate, data.frame(speaker = df_pba_debate_by_speaker$speaker, party, stringsAsFactors = FALSE))
df_ba_debate1 <- left_join(df_pba_debate, data.frame(speaker = df_pba_debate_by_speaker$speaker, party, stringsAsFactors = FALSE))
nrow(df_ba_debate)
nrow(df_pba_debate)
nrow(df_ba_debate1)
head(df_ba_debate1)
head(df_pba_debate)
df_pba_debate <- left_join(df_pba_debate, data.frame(speaker = df_pba_debate_by_speaker$speaker, party, stringsAsFactors = FALSE))
names(df_pba_debate)
names(df_pba_debate_by_speaker)
devtools::use_data(df_pba_debate_by_speaker, overwrite = TRUE)
devtools::use_data(df_pba_debate, overwrite = TRUE)
corp <- corpus(df_pba_debate_by_speaker, docid_field = "speaker",
text_field = "contributions")
summary(corp)
corpdfm <- dfm(corp)
wfish <- textmodel_wordfish(corpdfm, dir = c(1, 12))
summary(wfish)
preds  <- predict(wfish, interval = "confidence")
preds
# make a data frame from fit matrix and the document variables
pos <- data.frame(docvars(corpdfm), preds$fit)
pos
pos <- pos[order(pos$fit),]
pos
library(ggplot2)
ggplot(pos, aes(x = fit, y = 1:12, xmin = lwr, xmax = upr, col = Party)) +
geom_point() +
geom_errorbarh(height = 0) +
scale_color_manual(values = c("red", "blue")) +
scale_y_continuous(labels = pos$Speaker, breaks = 1:12) +
theme_minimal() +
labs(x = "Position", y = "Speaker") +
ggtitle("Estimated Positions from Senate Partial-Birth Abortion Debate",
subtitle = "October 21st, 2003")
ggplot(pos, aes(x = fit, y = 1:12, xmin = lwr, xmax = upr, col = party)) +
geom_point() +
geom_errorbarh(height = 0) +
scale_color_manual(values = c("red", "blue")) +
scale_y_continuous(labels = pos$speaker, breaks = 1:12) +
theme_minimal() +
labs(x = "Position", y = "Speaker") +
ggtitle("Estimated Positions from Senate Partial-Birth Abortion Debate",
subtitle = "October 21st, 2003")
ggplot(pos, aes(x = fit, y = 1:nrow(pos), xmin = lwr, xmax = upr, col = party)) +
geom_point() +
geom_errorbarh(height = 0) +
scale_color_manual(values = c("red", "blue")) +
scale_y_continuous(labels = pos$speaker, breaks = 1:nrow(pos)) +
theme_minimal() +
labs(x = "Position", y = "Speaker") +
ggtitle("Estimated Positions from Senate Partial-Birth Abortion Debate",
subtitle = "October 21st, 2003")
docnames(corpdfm)
wfish <- textmodel_wordfish(corpdfm, dir = c(3, 21))
preds  <- predict(wfish, interval = "confidence")
preds
# make a data frame from fit matrix and the document variables
pos <- data.frame(docvars(corpdfm), preds$fit)
pos <- pos[order(pos$fit),]
ggplot(pos, aes(x = fit, y = 1:nrow(pos), xmin = lwr, xmax = upr, col = party)) +
geom_point() +
geom_errorbarh(height = 0) +
scale_color_manual(values = c("red", "blue")) +
scale_y_continuous(labels = pos$speaker, breaks = 1:nrow(pos)) +
theme_minimal() +
labs(x = "Position", y = "Speaker") +
ggtitle("Estimated Positions from Senate Partial-Birth Abortion Debate",
subtitle = "October 21st, 2003")
pos
docvars(corpdfm)
summary(corp)
corp <- corpus(df_pba_debate_by_speaker, text_field = "contributions")
corpdfm <- dfm(corp)
wfish <- textmodel_wordfish(corpdfm, dir = c(3, 21))
summary(wfish)
preds  <- predict(wfish, interval = "confidence")
preds
# make a data frame from fit matrix and the document variables
pos <- data.frame(docvars(corpdfm), preds$fit)
pos <- pos[order(pos$fit),]
pos
ggplot(pos, aes(x = fit, y = 1:nrow(pos), xmin = lwr, xmax = upr, col = party)) +
geom_point() +
geom_errorbarh(height = 0) +
scale_color_manual(values = c("red", "blue")) +
scale_y_continuous(labels = pos$speaker, breaks = 1:nrow(pos)) +
theme_minimal() +
labs(x = "Position", y = "Speaker") +
ggtitle("Estimated Positions from Senate Partial-Birth Abortion Debate",
subtitle = "October 21st, 2003")
ggplot(pos, aes(x = fit, y = 1:nrow(pos), xmin = lwr, xmax = upr, col = party)) +
geom_point() +
geom_errorbarh(height = 0) +
scale_color_manual(values = c("blue", "red")) +
scale_y_continuous(labels = pos$speaker, breaks = 1:nrow(pos)) +
theme_minimal() +
labs(x = "Position", y = "Speaker") +
ggtitle("Estimated Positions from Senate Partial-Birth Abortion Debate",
subtitle = "October 21st, 2003")
str(mod)
str(wfishmod)
str(wfish)
data.frame(word = wfish$features, score = wfish$beta)
arrange(data.frame(word = wfish$features, score = wfish$beta), score)
arrange(data.frame(word = wfish$features, score = wfish$beta), -score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "gruesome", "kill")
filter(data.frame(word = wfish$features, score = wfish$beta), -score), word %in% testwords)
filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords)
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "gruesome", "kill", "roe", "wade")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "his", "their")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "his", "their", "father")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "his", "their", "father", "mother")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "her", "his", "children", "child")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "her", "his", "child", "pro-life")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "her", "his", "child", "pro-life", "pro-choice")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "her", "his", "child", "religious")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "her", "his", "child", "religious", "god")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "her", "his", "child", "religious", "catholic")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "her", "his", "child", "religion", "catholic")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "her", "his", "child", "religion", "catholic", "doctor")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe", "wade", "medical", "her", "his", "child", "religion", "catholic", "doctor", "nurse")
arrange(filter(data.frame(word = wfish$features, score = wfish$beta), word %in% testwords), score)
kwic(corp, "gruesome", window = 20)
corp <- corpus(df_pba_debate_by_speaker, text_field = "contributions", docid_field = "speaker")
docvars(corp, "speaker") <- df_pba_debate_by_speaker$speaker # add a speaker field
corpdfm <- dfm(corp)
wfish <- textmodel_wordfish(corpdfm, dir = c(3, 21))
preds  <- predict(wfish, interval = "confidence")
preds
# make a data frame from fit matrix and the document variables
pos <- data.frame(docvars(corpdfm), preds$fit)
pos <- pos[order(pos$fit),]
pos
ggplot(pos, aes(x = fit, y = 1:nrow(pos), xmin = lwr, xmax = upr, col = party)) +
geom_point() +
geom_errorbarh(height = 0) +
scale_color_manual(values = c("blue", "red")) +
scale_y_continuous(labels = pos$speaker, breaks = 1:nrow(pos)) +
theme_minimal() +
labs(x = "Position", y = "Speaker") +
ggtitle("Estimated Positions from Senate Partial-Birth Abortion Debate",
subtitle = "October 21st, 2003")
?geom_label
wscores <- data.frame(word = wfish$features,
score = wfish$beta,
offset = wfish$psi)
ggplot(wscores, aes(score, offset, label = word)) +
geom_text(alpha = 0.2)
theme_set(theme_minimal())
ggplot(wscores, aes(score, offset, label = word)) +
geom_text(alpha = 0.2)
wscores <- data.frame(word = wfish$features,
score = wfish$beta,
offset = wfish$psi)
testwords <- c("life", "choice", "womb", "her", "woman", "health",
"born", "baby", "little", "gruesome", "kill", "roe",
"wade", "medical", "her", "his", "child", "religion",
"catholic", "doctor", "nurse")
testscores <- wscores %>%
filter(word %in% testwords) %>%
arrange(score)
testscores
testscores[,1:2] # just word and score columns
ggplot(wscores, aes(score, offset, label = word)) +
geom_text(color = "grey", alpha = 0.2) +
geom_text(data = testscores, col = "red")
ggplot(wscores, aes(score, offset, label = word)) +
geom_point(color = "grey", alpha = 0.2) +
geom_text(data = testscores, col = "black")
library(ggrepel)
?ggrepel
ggplot(wscores, aes(score, offset, label = word)) +
geom_point(color = "grey", alpha = 0.2) +
geom_text_repel(data = testscores, col = "black")
ggplot(wscores, aes(score, offset, label = word)) +
geom_point(color = "grey", alpha = 0.2) +
geom_text_repel(data = testscores, col = "black", arrow = "open")
ggplot(wscores, aes(score, offset, label = word)) +
geom_point(color = "grey", alpha = 0.2) +
geom_text_repel(data = testscores, col = "black", arrow = 1)
ggplot(wscores, aes(score, offset, label = word)) +
geom_point(color = "grey", alpha = 0.2) +
geom_text_repel(data = testscores, col = "black") +
geom_point()
ggplot(wscores, aes(score, offset, label = word)) +
geom_point(color = "grey", alpha = 0.2) +
geom_text_repel(data = testscores, col = "black") +
geom_point(data = testscores)
ggplot(wscores, aes(score, offset, label = word)) +
geom_point(color = "grey", alpha = 0.2) +
geom_text_repel(data = testscores, col = "black") +
geom_point(data = testscores) +
labs(x = "Word score", y = "Offset parameter") +
ggtitle("Wordscores for Debate Vocabulary",
subtitle = "Note: Offset parameter is roughly proportional to frequency")
kwic(corp, "catholic")
kwic(corp, "religion")
kwic(corp, "religion", window = 20)
str(kwic(corp, "religion", window = 20))
str(kwic(corp, "roe", window = 20))
(kwic(corp, "roe", window = 20))
roe <- (kwic(corp, "roe", window = 20))
View(roe)
install.packages("xtable")
View(roe)
ca_mod <- ca(as.matrix(corpdfm))
library(ca)
install.packages("ca")
ca_mod <- ca(as.matrix(corpdfm))
library(ca)
ca_mod <- ca(as.matrix(corpdfm))
summary(ca_mod)
?plot.ca
plot(ca_mod, what = c("all", "none"))
summary(ca_mod)
ca_mod$colcoord[,2]
sort(ca_mod$colcoord[,2])
head(sort(ca_mod$colcoord[,2]) 30)
head(sort(ca_mod$colcoord[,2]), 30)
tail(sort(ca_mod$colcoord[,2]), 30)
sort(ca_mod$colcoord[,2], decreasing = TRUE)
sort(ca_mod$colcoord[,2], decreasing = FALSE)
corpdfm2 <- dfm(corp, remove = stopwords(), stem = TRUE)
corpdfm2
corpdfm
corpdfm2 <- dfm_trim(dfm(corp, remove = stopwords(), stem = TRUE), min_termfreq = 10, min_docfreq = 3)
corpdfm2
ca_mod <- ca(as.matrix(corpdfm2))
sort(ca_mod$colcoord[,2], decreasing = FALSE)
corpdfm2 <- dfm_trim(dfm(corp, remove = stopwords(), remove_punct = TRUE, stem = TRUE), min_termfreq = 10, min_docfreq = 3)
sort(ca_mod$colcoord[,2], decreasing = FALSE)
corpdfm2 <- dfm_trim(dfm(corp, remove = stopwords(), remove_punct = TRUE, stem = TRUE), min_termfreq = 10, min_docfreq = 3)
ca_mod <- ca(as.matrix(corpdfm2))
sort(ca_mod$colcoord[,2], decreasing = FALSE)
plot(ca_mod)
ca_mod$sv
plot(ca_mod$sv)
